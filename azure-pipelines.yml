jobs:
  - job: 'BuildPython'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python35:
          python.version: '3.5'
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 2

    steps:
      - task: UsePythonVersion@0
        inputs:
            versionSpec: '$(python.version)'
            architecture: 'x64'
      - bash: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add conda to PATH
      - bash: conda create --yes --quiet --name testenv python=$(python.version)
        displayName: Create Anaconda environment
      - bash: |
            source activate testenv
            conda install --yes --quiet --name testenv pybind11 scipy
            python -m pip install flake8 cpplint
            python -m pip install -r requirements.txt
        displayName: Install Python packages
      - script: |
            source activate testenv
            flake8 .
        displayName: Run lint tests
      - script: |
            cmake --version
            git clone --depth=1 https://github.com/NSLS-II/lmfit.git
            cd lmfit
            mkdir lmfit_build
            cd lmfit_build
            cmake -DBUILD_SHARED_LIBS=ON \
                -DCMAKE_POSITION_INDEPENDENT_CODE=YES \
                -DCMAKE_INSTALL_PREFIX=/usr \
                ..
            make
            sudo make install
        displayName: Build lmfit
      - bash: |
            source activate testenv
            export CENTROIDS_DEBUG_OUTPUT=1
            python setup.py install
        displayName: Install using setup.py
      - script: |
            source activate testenv
            pip install pytest
            pytest --pyargs pycentroids.tests
        displayName: 'Test with pytest'

  - job: 'BuildLib'
    pool:
        vmImage: 'ubuntu-latest'
    steps:
        - task: UsePythonVersion@0
          inputs:
              versionSpec: '3.6'
              architecture: 'x64'
        - script: |
            sudo apt-get install cmake
            python -m pip install cpplint
          displayName: Install Deps
        - script: |
            cmake --version
            git clone --depth=1 https://github.com/NSLS-II/lmfit.git
            cd lmfit
            mkdir lmfit_build
            cd lmfit_build
            cmake -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_POSITION_INDEPENDENT_CODE=YES \
            -DCMAKE_INSTALL_PREFIX=/usr \
            ..
            make
            sudo make install
          displayName: Build and Install lmfit
        - script: |
            mkdir build
            cd build
            cmake -DBUILD_PYTHON=NO -DBUILD_DOCS=NO ..
            make
          displayName: Build and Install

  - job: 'BuildDocs'
    pool:
        vmImage: 'ubuntu-latest'
    steps:
        - task: DownloadSecureFile@1
          inputs:
              secureFile: deploy_key
          displayName: 'Get the deploy key'
        - task: UsePythonVersion@0
          inputs:
              versionSpec: '3.6'
              architecture: 'x64'
        - script: |
            python -m pip install sphinx sphinx-bootstrap-theme breathe
            sudo npm install -g gh-pages
            sudo apt-get install flex bison cmake
            git config user.email "ci-build@bnl.gov"
            git config user.name "ci-build"
          displayName: Install Deps
        - script: |
            export DOXYGEN_VER=1.8.15
            export DOXYGEN_TAR=${DOXYGEN_VER}.linux.bin.tar.gz
            export DOXYGEN_URL="https://downloads.sourceforge.net/project/doxygen/rel-${DOXYGEN_VER}/doxygen-${DOXYGEN_VER}.src.tar.gz"
            export TMP_DIR=${TMPDIR-/tmp}
            export INSTALL_DIR=${TMP_DIR}/doxygen
            wget -O - "${DOXYGEN_URL}" | tar xzf - -C ${TMP_DIR}
            cd ${TMP_DIR}/doxygen-${DOXYGEN_VER}
            mkdir build && cd build
            cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} ..
            make
            make install
          displayName: Build and Install Doxygen
        - bash: |
            mkdir builddir
            cd builddir
            cmake -DBUILD_DOCS=ON -DCPPLINT_CHECK=OFF \
                  -DBUILD_PYTHON=OFF \
                  -DBUILD_LIB=OFF \
                  -DDOXYGEN_EXECUTABLE=/tmp/doxygen/bin/doxygen \
                  ..
            make docs
          displayName: Build Docs using CMake
        - script: |
            mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
            chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            gh-pages --repo=git@github.com:NSLS-II/centroids.git --dotfiles=true --dist builddir/docs/build
          displayName: Publish to GitHub Pages
          condition: |
              not(eq(variables['Build.Reason'], 'PullRequest'))
